{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ghenov/WebstormProjects/Phoenix Technologies Code Challenge/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Ghenov\\\\WebstormProjects\\\\Phoenix Technologies Code Challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport { useEffect, useState } from \"react\";\nimport { faker } from '@faker-js/faker'; // import CustomerTable from \"./components/CustomerTable\";\n\n/**\n *\n * Welcome to the Data Sorting coding challenge.\n *\n * Load json data from `/public/data.json` and render it in a table\n * using `/public/table.png` design.\n *\n * Make this behaviour reusable.\n *\n * Ask questions & have fun!\n *\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      getData = _useState2[1];\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var fetchData = function fetchData() {\n    fetch(\"data.json\").then(function (res) {\n      return res.json();\n    }).then(function (response) {\n      console.log(response);\n      getData(response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phoenix Technologies Code Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Joined On\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Last Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transactions/Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Bio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), data.map(function (item, i) {\n          return /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [item.avatar, \", \", item.userName, \", \", item.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.joinedAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.lastLogin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"-$\" + faker.finance.amount(), \", \", \"$500\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 25\n              }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.bio\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 25\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, _this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, _this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"+8SzEMhU8cGVyeQ6sXtG4v/5EKI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","faker","App","data","getData","fetchData","fetch","then","res","json","response","console","log","map","item","i","avatar","userName","email","name","joinedAt","lastLogin","finance","amount","status","bio"],"sources":["C:/Users/Ghenov/WebstormProjects/Phoenix Technologies Code Challenge/src/App.tsx"],"sourcesContent":["import \"./styles.scss\";\nimport {useEffect, useState} from \"react\";\nimport {faker} from '@faker-js/faker';\n\n// import CustomerTable from \"./components/CustomerTable\";\n\n/**\n *\n * Welcome to the Data Sorting coding challenge.\n *\n * Load json data from `/public/data.json` and render it in a table\n * using `/public/table.png` design.\n *\n * Make this behaviour reusable.\n *\n * Ask questions & have fun!\n *\n */\nfunction App() {\n\n    const [data, getData] = useState([])\n\n\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n\n    const fetchData = () => {\n        fetch(\"data.json\")\n            .then((res) =>\n                res.json())\n\n            .then((response) => {\n                console.log(response);\n                getData(response);\n            })\n\n    }\n\n    return (\n        <div>\n\n            <h1>Phoenix Technologies Code Challenge</h1>\n            <table>\n                <thead>\n                <tr>\n                    <th>User</th>\n                    <th>Name</th>\n                    <th>Joined On</th>\n                    <th>Last Login</th>\n                    <th>Transactions/Balance</th>\n                    <th>Status</th>\n                    <th>Bio</th>\n                </tr>\n                {data.map((item, i) => (\n                    <tbody key={i}>\n                    <tr>\n                        <td>{item.avatar}, {item.userName}, {item.email}</td>\n                        <td>{item.name}</td>\n                        <td>{item.joinedAt}</td>\n                        <td>{item.lastLogin}</td>\n                        <td>{\"-$\" + faker.finance.amount()}, {\"$500\"}</td>\n                        <td>{item.status}</td>\n                        <td>{item.bio}</td>\n                    </tr>\n                    </tbody>\n                ))}\n                </thead>\n            </table>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;;;;AAAA,OAAO,eAAP;AACA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,KAAR,QAAoB,iBAApB,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAe;EAAA;;EAAA;;EAEX,gBAAwBF,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOG,IAAP;EAAA,IAAaC,OAAb;;EAGAL,SAAS,CAAC,YAAM;IACZM,SAAS;EACZ,CAFQ,EAEN,EAFM,CAAT;;EAKA,IAAMA,SAAS,GAAG,SAAZA,SAAY,GAAM;IACpBC,KAAK,CAAC,WAAD,CAAL,CACKC,IADL,CACU,UAACC,GAAD;MAAA,OACFA,GAAG,CAACC,IAAJ,EADE;IAAA,CADV,EAIKF,IAJL,CAIU,UAACG,QAAD,EAAc;MAChBC,OAAO,CAACC,GAAR,CAAYF,QAAZ;MACAN,OAAO,CAACM,QAAD,CAAP;IACH,CAPL;EASH,CAVD;;EAYA,oBACI;IAAA,wBAEI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAA,uBACI;QAAA,wBACA;UAAA,wBACI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ,eAGI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAHJ,eAII;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAJJ,eAKI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QALJ,eAMI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QANJ,eAOI;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAPJ;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,EAUCP,IAAI,CAACU,GAAL,CAAS,UAACC,IAAD,EAAOC,CAAP;UAAA,oBACN;YAAA,uBACA;cAAA,wBACI;gBAAA,WAAKD,IAAI,CAACE,MAAV,QAAoBF,IAAI,CAACG,QAAzB,QAAqCH,IAAI,CAACI,KAA1C;cAAA;gBAAA;gBAAA;gBAAA;cAAA,SADJ,eAEI;gBAAA,UAAKJ,IAAI,CAACK;cAAV;gBAAA;gBAAA;gBAAA;cAAA,SAFJ,eAGI;gBAAA,UAAKL,IAAI,CAACM;cAAV;gBAAA;gBAAA;gBAAA;cAAA,SAHJ,eAII;gBAAA,UAAKN,IAAI,CAACO;cAAV;gBAAA;gBAAA;gBAAA;cAAA,SAJJ,eAKI;gBAAA,WAAK,OAAOpB,KAAK,CAACqB,OAAN,CAAcC,MAAd,EAAZ,QAAsC,MAAtC;cAAA;gBAAA;gBAAA;gBAAA;cAAA,SALJ,eAMI;gBAAA,UAAKT,IAAI,CAACU;cAAV;gBAAA;gBAAA;gBAAA;cAAA,SANJ,eAOI;gBAAA,UAAKV,IAAI,CAACW;cAAV;gBAAA;gBAAA;gBAAA;cAAA,SAPJ;YAAA;cAAA;cAAA;cAAA;YAAA;UADA,GAAYV,CAAZ;YAAA;YAAA;YAAA;UAAA,SADM;QAAA,CAAT,CAVD;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAgCH;;GAtDQb,G;;KAAAA,G;AAwDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}